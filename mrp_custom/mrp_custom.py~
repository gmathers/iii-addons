import time
import pytz
import urllib
from openerp import SUPERUSER_ID
from datetime import datetime
from dateutil.relativedelta import relativedelta

from openerp.osv import fields, osv
from openerp import netsvc
from openerp import pooler
from openerp.tools.translate import _
import openerp.addons.decimal_precision as dp
from openerp.osv.orm import browse_record, browse_null
from openerp.tools import DEFAULT_SERVER_DATE_FORMAT, DEFAULT_SERVER_DATETIME_FORMAT, DATETIME_FORMATS_MAP
from openerp.osv import fields,osv
     
class product_product(osv.Model):
    _inherit = 'product.product'
# 
#     def _repair_order_count(self, cr, uid, ids, field_name, arg, context=None):
#         repair = self.pool('mrp.repair')
#         print repair
#         res = {}
#         for product_id in ids:
#             nb = repair.search_count(cr, uid, [('product_id', '=', product_id),('state', '=', 'done')], context=context)
#             print '++++++++++ nb  ****************************************',nb
#             res[product_id] = {
#                 'repair_order_count': nb,
#             }            
#         return res   
# 
#     def action_view_repair(self, cr, uid, ids, context=None):
#         act_obj = self.pool.get('ir.actions.act_window')
#         mod_obj = self.pool.get('ir.model.data')
#         product_ids = []
#         for template in self.browse(cr, uid, ids, context=context):
#             product_ids += [x.id for x in template.repair_ids]
#         result = mod_obj.xmlid_to_res_id(cr, uid, 'mrp_repair.action_repair_order_tree',raise_if_not_found=True)
#         result = act_obj.read(cr, uid, [result], context=context)[0]
#         result['domain'] = "[('product_id','in',[" + ','.join(map(str, product_ids)) + "])]"
#         return result
#     
#     _columns = {
#         'repair_order_count': fields.function(_repair_order_count, string='# of Repair Order', type='integer'),
#         'repair_ids': fields.one2many('mrp.repair','product_id','Repaired Order')
#     }
    def _repair_count(self, cr, uid, ids, field_name, arg, context=None):
        OrderRepair = self.pool['mrp.repair']
        return {
            product_id: OrderRepair.search_count(cr,uid, [('product_id', '=', product_id)], context=context)
            for product_id in ids
        }
    
#     def action_view_repair(self, cr, uid, ids, context=None):
#         print '>>>>>>>>>>>>>>>>>>>>>>'
#         act_obj = self.pool.get('ir.actions.act_window')
#         print '>>>>>>>>>>>>>>>>>>>>>>'
#         mod_obj = self.pool.get('ir.model.data')
#         print '>>>>>>>>>>>>>>>>>>>>>>'
#         product_ids = []
#         print '>>>>>>>>>>>>>>>>>>>>>>'
#         for template in self.browse(cr, uid, ids, context=context):
#             print '>>>>>>>>>>>>>>>>>>>>>>'
#             product_ids += [x.id for x in template.product_variant_ids]
#             print '>>>>>>>>>>>>>>>>>>>>>>'
#         result = mod_obj.xmlid_to_res_id(cr, uid, 'mrp_repair.action_repair_order_tree',raise_if_not_found=True)
#         print '>>>>>>>>>>>>>>>>>>>>>>'
#         result = act_obj.read(cr, uid, [result], context=context)[0]
#         print '>>>>>>>>>>>>>>>>>>>>>>'
#         result['domain'] = "[('product_id','in',[" + ','.join(map(str, product_ids)) + "])]"
#         print '>>>>>>>>>>>>>>>>>>>>>>'
#         return result
    
    
    _columns = {
        'repair_count': fields.function(_repair_count, string='# REpair', type='integer'),
 
            }
# class res_partner(osv.osv):
#      _inherit = 'res.partner'
#      def _repair_order_count(self, cr, uid, ids, field_name, arg, context=None):
#         print '*******************************'      
#         repair = self.pool('mrp.repair')
#         print repair
#         res = {}
#         for product_id in ids:
#             nb = repair.search_count(cr, uid, [('product_id', '=', product_id),('state', '=', 'done')], context=context)
#             print '++++++++++ nb',nb
#             res[product_id] = {
#                 'repair_order_count': nb,
#             }            
#         return res
#      _columns = {
#         'repair_order_count': fields.function(_repair_order_count, string='# of Repair Order', type='integer'),
#         'repair_ids': fields.one2many('mrp.repair','product_id','Repaired Order')
#     }



